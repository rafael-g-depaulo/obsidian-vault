/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MediumImporterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/modals/import_article_modal.ts
var import_obsidian3 = require("obsidian");

// src/utils/vault.ts
var import_obsidian = require("obsidian");
var createNewNote = async (plugin, title, content, subfolder) => {
  const { vault, workspace } = plugin.app;
  const { folder } = plugin.settings;
  createFolderIfNotExists(plugin, folder);
  let fileName = title;
  fileName = fileName.replace(/\*/g, "").replace(/"/g, "").replace(/\\/g, "").replace(/\//g, "").replace(/</g, "").replace(/>/g, "").replace(/:/g, " -").replace(/\|/g, "").replace(/\?/g, "");
  new import_obsidian.Notice(`Creating note with title: ${fileName}`);
  try {
    const fileFolder = subfolder ? `${folder}/${subfolder}` : folder;
    const file = await vault.create(
      (0, import_obsidian.normalizePath)(`${fileFolder}/${fileName}.md`),
      content
    );
    const leaf = workspace.getLeaf(true);
    await leaf.openFile(file);
  } catch (error) {
    new import_obsidian.Notice(`[Medium Importer] Error: ${error}`);
  }
};
var createFolderIfNotExists = async (plugin, folderName) => {
  const { vault } = plugin.app;
  const folderPath = (0, import_obsidian.normalizePath)(folderName);
  if (!vault.getAbstractFileByPath(folderPath)) {
    new import_obsidian.Notice(`Creating folder: ${folderName}`);
    await vault.createFolder(folderPath);
  }
};

// src/utils/medium.ts
var import_obsidian2 = require("obsidian");
var MEDIUM_API_BASE_URL = "https://medium2.p.rapidapi.com";
var getArticleMarkdownFromId = async (id, apiKey) => {
  const url = `/article/${id}/markdown`;
  const result = await mediumRequest(url, "GET", apiKey);
  const markdown = JSON.parse(result).markdown;
  return markdown;
};
var getArticleInfo = async (id, apiKey) => {
  const url = `/article/${id}`;
  const result = await mediumRequest(url, "GET", apiKey);
  return JSON.parse(result);
};
var articleInfoToProperties = (articleInfo, authorInfo) => {
  const tags = articleInfo.tags ? `
- ${articleInfo.tags.join("\n- ")}` : "";
  const topics = articleInfo.topics ? `
- ${articleInfo.topics.join("\n- ")}` : "";
  const properties = `---
id: ${articleInfo.id}
title: ${articleInfo.title.replace(":", "-")}
subtitle: ${articleInfo.subtitle?.replace(":", "-") ?? ""}
author: ${authorInfo?.fullname ?? articleInfo.author}
published: ${articleInfo.published_at}
modified: ${articleInfo.last_modified_at}
url: ${articleInfo.url}
word_count: ${articleInfo.word_count}
tags: ${tags}
topics: ${topics}
---`;
  return properties;
};
var getAuthorInfo = async (username, apiKey) => {
  const userId = await getUserIdFromUsername(username, apiKey);
  const url = `/user/${userId}`;
  const result = await mediumRequest(url, "GET", apiKey);
  return JSON.parse(result);
};
var getUserArticles = async (userId, apiKey) => {
  const url = `/user/${userId}/articles`;
  const result = await mediumRequest(url, "GET", apiKey);
  return JSON.parse(result);
};
var getUserIdFromUsername = async (username, apiKey) => {
  const url = `/user/id_for/${username}`;
  const result = await mediumRequest(url, "GET", apiKey);
  return JSON.parse(result).id;
};
var mediumRequest = async (url, method, apiKey) => {
  const result = await (0, import_obsidian2.request)({
    url: `${MEDIUM_API_BASE_URL}${url}`,
    method,
    headers: {
      "x-rapidapi-key": apiKey,
      "x-rapidapi-host": "medium2.p.rapidapi.com"
    }
  });
  return result;
};

// src/utils/modal.ts
var initTextInputModal = (modal, config) => {
  const { contentEl } = modal;
  const { title, subtitle, inputPlaceholder } = config;
  contentEl.createEl("h2", { text: title });
  for (const sub of subtitle) {
    contentEl.createEl("p", {
      cls: "mi-subtitle",
      text: sub
    });
  }
  const input = contentEl.createEl("input", {
    cls: "mi-input",
    type: "text",
    placeholder: inputPlaceholder
  });
  const button = contentEl.createEl("button", {
    cls: "mi-submit",
    text: "Submit"
  });
  return { input, submitButton: button };
};
var initDropdownModal = (modal, config) => {
  const { contentEl } = modal;
  const { title, subtitle, options } = config;
  contentEl.createEl("h2", { text: title });
  for (const sub of subtitle) {
    contentEl.createEl("p", {
      cls: "mi-subtitle",
      text: sub
    });
  }
  const select = contentEl.createEl("select", {
    cls: "mi-select"
  });
  for (const option of options) {
    select.createEl("option", {
      text: option.displayName,
      value: option.id
    });
  }
  const button = contentEl.createEl("button", {
    cls: "mi-submit",
    text: "Submit"
  });
  return { select, submitButton: button };
};

// src/modals/import_article_modal.ts
var ImportMediumArticleModal = class extends import_obsidian3.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    const { input, submitButton } = initTextInputModal(this, {
      title: "Import Medium Article",
      subtitle: [
        "Enter the URL of the Medium article you want to import.",
        "Should be in the format https://medium.com/[published-in]/[title-of-the-article]-[id]"
      ],
      inputPlaceholder: "Medium article URL"
    });
    submitButton.addEventListener("click", async () => {
      try {
        contentEl.empty();
        contentEl.createDiv({ cls: "loading-wrapper" }).createSpan({ cls: "loading" });
        if (!this.plugin.settings.rapidAPIKey) {
          new import_obsidian3.Notice(
            "[Medium Importer] Please enter your API key with the command 'Set API key'"
          );
          return;
        }
        const id = input.value.split("-").pop();
        if (!id) {
          new import_obsidian3.Notice(
            "[Medium Importer] Invalid URL. Please enter a valid Medium article URL."
          );
          return;
        }
        const markdown = await getArticleMarkdownFromId(
          id,
          this.plugin.settings.rapidAPIKey
        );
        const articleInfo = await getArticleInfo(
          id,
          this.plugin.settings.rapidAPIKey
        );
        if (!markdown) {
          return;
        }
        const title = articleInfo.title;
        const properties = articleInfoToProperties(articleInfo);
        const content = `${properties}
${markdown}`;
        await createNewNote(this.plugin, title, content);
      } catch (error) {
        new import_obsidian3.Notice(`[Medium Importer] Unexpected Error: ${error}`);
      }
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian4 = require("obsidian");
var DEFAULT_SETTINGS = {
  folder: "Medium",
  authors: {}
};
var MediumImporterSettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let apiInput = null;
    new import_obsidian4.Setting(containerEl).setName("RapidAPI key").setDesc(
      "Create an account at https://rapidapi.com/ to get an API key. Click '\u2713' to save."
    ).addText((text) => {
      text.setPlaceholder("API key");
      apiInput = text;
    }).addExtraButton(
      (button) => button.setIcon("checkmark").setTooltip("Set API key").onClick(async () => {
        if (apiInput == null) return;
        this.plugin.settings.rapidAPIKey = apiInput.getValue();
        apiInput.setValue("");
        await this.plugin.saveSettings();
        new import_obsidian4.Notice("API key set successfully");
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Folder").setDesc("Folder to store imported Medium articles.").addText(
      (text) => text.setPlaceholder("Folder name").setValue(this.plugin.settings.folder).onChange(async (value) => {
        this.plugin.settings.folder = value;
        await this.plugin.saveSettings();
      })
    );
    const authors = Object.values(this.plugin.settings.authors);
    console.log(authors);
    if (authors.length > 0) {
      new import_obsidian4.Setting(containerEl).setHeading().setName("Authors").setDesc(
        "Choose whether to sync author on startup or delete author."
      );
      for (const author of authors) {
        new import_obsidian4.Setting(containerEl).setName(author.authorInfo.fullname).setDesc(author.authorInfo.bio).addToggle(
          (toggle) => toggle.setValue(author.syncOnBoot ?? false).onChange(async (value) => {
            author.syncOnBoot = value;
            await this.plugin.saveSettings();
          })
        ).addExtraButton(
          (button) => button.setIcon("trash").setTooltip("Remove author").onClick(async () => {
            delete this.plugin.settings.authors[author.authorInfo.id];
            await this.plugin.saveSettings();
            new import_obsidian4.Notice("Author removed successfully");
            this.display();
          })
        );
      }
    }
  }
};

// src/modals/add_author_modal.ts
var import_obsidian6 = require("obsidian");

// src/utils/author.ts
var import_obsidian5 = require("obsidian");
var addAuthor = async (plugin, username) => {
  const { rapidAPIKey, folder, authors } = plugin.settings;
  if (rapidAPIKey == null) {
    new import_obsidian5.Notice(
      "[Medium Importer] Please enter your API key in the settings."
    );
    return;
  }
  const authorInfo = await getAuthorInfo(
    username,
    rapidAPIKey
  );
  createFolderIfNotExists(plugin, `${folder}/${authorInfo.fullname}`);
  const articles = await getUserArticles(
    authorInfo.id,
    rapidAPIKey
  );
  new import_obsidian5.Notice(
    `[Medium Importer] Found ${articles.count} articles by ${authorInfo.fullname}`
  );
  let author = authors[authorInfo.id];
  if (author == null) {
    author = { articles: [], authorInfo, syncOnBoot: false };
    plugin.settings.authors[authorInfo.id] = author;
  }
  await importMediumArticles(
    author,
    authorInfo,
    articles,
    rapidAPIKey,
    plugin
  );
  await plugin.saveSettings();
};
var syncAuthor = async (plugin, author) => {
  const { rapidAPIKey } = plugin.settings;
  const { authorInfo } = author;
  if (rapidAPIKey == null) {
    new import_obsidian5.Notice(
      "[Medium Importer] Please enter your API key in the settings."
    );
    return;
  }
  const articles = await getUserArticles(
    authorInfo.id,
    rapidAPIKey
  );
  new import_obsidian5.Notice(
    `[Medium Importer] Synchronizing articles by ${authorInfo.fullname}`
  );
  await importMediumArticles(
    author,
    authorInfo,
    articles,
    rapidAPIKey,
    plugin
  );
  await plugin.saveSettings();
};
async function importMediumArticles(author, authorInfo, articles, rapidAPIKey, plugin) {
  const articlesToImport = articles.associated_articles.filter(
    (articleId) => !author.articles.includes(articleId)
  );
  if (articlesToImport.length === 0) {
    new import_obsidian5.Notice(
      `[Medium Importer] No new articles found for ${authorInfo.fullname}`
    );
    return;
  }
  for (const articleId of articlesToImport) {
    try {
      const markdown = await getArticleMarkdownFromId(
        articleId,
        rapidAPIKey
      );
      const articleInfo = await getArticleInfo(articleId, rapidAPIKey);
      if (!markdown) {
        continue;
      }
      const title = articleInfo.title;
      const properties = articleInfoToProperties(articleInfo, authorInfo);
      const content = `${properties}
${markdown}`;
      await createNewNote(plugin, title, content, authorInfo.fullname);
      author.articles.push(articleId);
    } catch (error) {
      new import_obsidian5.Notice(
        `[Medium Importer] Unexpected Error importing article with id: ${articleId}`
      );
    }
  }
  new import_obsidian5.Notice(
    `[Medium Importer] Imported ${articlesToImport.length} articles by ${authorInfo.fullname}`
  );
  plugin.settings.authors[authorInfo.id] = author;
}

// src/modals/add_author_modal.ts
var AddMediumAuthorModal = class extends import_obsidian6.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    const { input, submitButton } = initTextInputModal(this, {
      title: "Add Medium Author",
      subtitle: [
        "Enter the user name of the Medium author you want to add to your library.",
        "You can find the username from the user's/author's profile page URL. (https://medium.com/@[user-name])"
      ],
      inputPlaceholder: "Username"
    });
    submitButton.addEventListener("click", async () => {
      try {
        contentEl.empty();
        contentEl.createDiv({ cls: "loading-wrapper" }).createSpan({ cls: "loading" });
        if (!this.plugin.settings.rapidAPIKey) {
          new import_obsidian6.Notice(
            "[Medium Importer] Please enter your API key in the settings."
          );
          return;
        }
        addAuthor(this.plugin, input.value);
      } catch (error) {
        new import_obsidian6.Notice(`[Medium Importer] Unexpected Error: ${error}`);
      }
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/sync_author_modal.ts
var import_obsidian7 = require("obsidian");
var SyncMediumAuthorModal = class extends import_obsidian7.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    const { authors } = this.plugin.settings;
    const authorOptions = Object.entries(authors).map(([_, author]) => ({
      id: author.authorInfo.id,
      displayName: author.authorInfo.fullname
    }));
    if (authorOptions.length === 0) {
      new import_obsidian7.Notice(
        "[Medium Importer] No authors found. Please add an author first."
      );
      this.close();
      return;
    }
    const { select, submitButton } = initDropdownModal(this, {
      title: "Sync Medium Author",
      subtitle: [
        "Pick the author you want to sync with your Obsidian vault.",
        "You can find the username from the user's/author's profile page URL. (https://medium.com/@[user-name])"
      ],
      options: authorOptions
    });
    submitButton.addEventListener("click", async () => {
      try {
        contentEl.empty();
        contentEl.createDiv({ cls: "loading-wrapper" }).createSpan({ cls: "loading" });
        if (!this.plugin.settings.rapidAPIKey) {
          new import_obsidian7.Notice(
            "[Medium Importer] Please enter your API key in the settings."
          );
          return;
        }
        const selectedAuthor = Object.entries(authors).find(
          ([_, author]) => author.authorInfo.id === select.value
        )?.[1];
        if (!selectedAuthor) {
          new import_obsidian7.Notice(
            "[Medium Importer] Author not found. Please add an author first."
          );
          this.close();
          return;
        }
        syncAuthor(this.plugin, selectedAuthor);
      } catch (error) {
        new import_obsidian7.Notice(`[Medium Importer] Unexpected Error: ${error}`);
      }
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var MediumImporterPlugin = class extends import_obsidian8.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "import-medium-article",
      name: "Import article from Medium",
      callback: () => {
        new ImportMediumArticleModal(this).open();
      }
    });
    this.addCommand({
      id: "add-medium-author",
      name: "Add Medium author",
      callback: () => {
        new AddMediumAuthorModal(this).open();
      }
    });
    this.addCommand({
      id: "sync-medium-author",
      name: "Sync Medium author",
      callback: () => {
        new SyncMediumAuthorModal(this).open();
      }
    });
    this.addSettingTab(new MediumImporterSettingsTab(this.app, this));
    const authors = Object.values(this.settings.authors);
    for (const author of authors) {
      if (author.syncOnBoot) {
        syncAuthor(this, author);
      }
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

/* nosourcemap */